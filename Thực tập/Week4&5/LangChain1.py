import os
import gradio as gr
import google.generativeai as genai
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.chains.retrieval_qa.base import RetrievalQA
from langchain.docstore.document import Document

# C·∫•u h√¨nh API key Google
os.environ["GOOGLE_API_KEY"] = "AIzaSyABLonsDEQ7veJFWZf6lLlHvtPw9K4lBMs"  # Thay b·∫±ng API key c·ªßa b·∫°n
genai.configure(api_key=os.environ["GOOGLE_API_KEY"])

# T·∫°o embeddings & LLM
embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", temperature=0.2)

# Bi·∫øn l∆∞u Vector DB (to√†n c·ª•c)
vectorstore = None

def save_text_and_answer(text_input, question_input):
    global vectorstore
    
    # N·∫øu nh·∫≠p vƒÉn b·∫£n m·ªõi ‚Üí T·∫°o l·∫°i vectorstore
    if text_input:
        splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
        chunks = splitter.split_text(text_input)
        docs = [Document(page_content=chunk) for chunk in chunks]
        vectorstore = FAISS.from_documents(docs, embeddings)

    # N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu th√¨ b√°o l·ªói
    if vectorstore is None:
        return "‚ö†Ô∏è Vui l√≤ng nh·∫≠p vƒÉn b·∫£n tr∆∞·ªõc khi ƒë·∫∑t c√¢u h·ªèi."
    
    # T·∫°o chain QA
    qa_chain = RetrievalQA.from_chain_type(
        llm=llm,
        retriever=vectorstore.as_retriever(search_kwargs={"k": 3}),
        return_source_documents=True
    )

    # Tr·∫£ l·ªùi c√¢u h·ªèi
    result = qa_chain.invoke({"query": question_input})
    answer = result["result"]

    # Ngu·ªìn tham kh·∫£o
    sources = "\n".join([doc.page_content for doc in result["source_documents"]])
    return f"**C√¢u tr·∫£ l·ªùi:**\n{answer}\n\n**Ngu·ªìn tham kh·∫£o:**\n{sources}"

# Giao di·ªán Gradio
with gr.Blocks() as demo:
    gr.Markdown("## üìö Chatbot Q&A v·ªõi Google AI + Vector DB")
    text_input = gr.Textbox(lines=5, placeholder="Nh·∫≠p vƒÉn b·∫£n ·ªü ƒë√¢y...", label="VƒÉn b·∫£n")
    question_input = gr.Textbox(lines=2, placeholder="Nh·∫≠p c√¢u h·ªèi...", label="C√¢u h·ªèi")
    output = gr.Markdown()
    submit_btn = gr.Button("G·ª≠i c√¢u h·ªèi")
    
    submit_btn.click(save_text_and_answer, inputs=[text_input, question_input], outputs=output)

demo.launch()
